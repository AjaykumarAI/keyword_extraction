import boto3
import PyPDF2
from io import BytesIO
from pdf2image import convert_from_bytes

# Initialize the S3 client
s3_client = boto3.client('s3')
s3 = boto3.resource('s3')


def convert_pdf_to_images(bucket_name, object_key, start_page, end_page):
    # Get the object
    obj = s3.Object(bucket_name, object_key)

    # Download the PDF file into memory
    response = obj.get()
    file_data = response['Body'].read()

    # Read the PDF content using PyPDF2
    with BytesIO(file_data) as file:
        pdf_reader = PyPDF2.PdfFileReader(file)

        # Create a temporary PDF with the specified pages
        with BytesIO() as temp_pdf:
            pdf_writer = PyPDF2.PdfFileWriter()
            for page_num in range(start_page, end_page + 1):
                page = pdf_reader.getPage(page_num)
                pdf_writer.addPage(page)
            pdf_writer.write(temp_pdf)
            temp_pdf.seek(0)

            # Convert the temporary PDF file to images using pdf2image
            images = convert_from_bytes(temp_pdf.read())

    # Save the images to your local environment
    for i, image in enumerate(images):
        image.save(f'{object_key}_page_{start_page + i + 1}.png', 'PNG')


def merge_bounding_boxes(bboxes):
    """
    Merge multiple bounding boxes into one.
    
    Args:
    bboxes (list of tuples): A list of bounding boxes in the format (x, y, w, h).

    Returns:
    A single bounding box in the format (x, y, w, h) that encloses all given bounding boxes.
    """
    x_min = min([x for x, y, w, h in bboxes])
    y_min = min([y for x, y, w, h in bboxes])
    x_max = max([x + w for x, y, w, h in bboxes])
    y_max = max([y + h for x, y, w, h in bboxes])

    return (x_min, y_min, x_max - x_min, y_max - y_min)

# Example usage:
bboxes = [(30, 40, 10, 10), (31, 41, 15, 15), (50, 60, 20, 20), (52, 62, 25, 25), (80, 90, 30, 30)]
merged_bbox = merge_bounding_boxes(bboxes)
print(merged_bbox)



        

